raw = read.csv('Concrete_Data.xls')
View(raw)
raw = read.csv("Concrete_Data.xls")
raw = read.csv("Concrete_Data.csv")
View(raw)
raw = read.csv("Concrete_Data.csv")
View(raw)
raw = read.csv("Concrete_Data.csv")
View(raw)
raw = read.csv("Concrete_Data.csv")
View(raw)
d <- iris[,c(-5)]
plot(d)
cor(d)
cor(d, method = "kendall")
cor(d, method = "spearman")
cor.test(d$Sepal.Length,d$Sepal.Width)
library(corrplot)
cr <- cor(d)
corrplot(cr)
corrplot(cr)
corrplot(mtcars)
head(mtcars)
cars <- mtcars[-1,]
cars
cars <- mtcars[,c(-1)]
cars
cars <- mtcars
View(cars)
corrplot(cars)
corrplot(cor(cars))
help(mtcars)
data(iris)
str(iris)
View(iris)
help data()
help data
help(data)
str(iris)
table(iris$Species)
head(iris)
runif(5)
gp <- runif(nrow(iris))
gp
gp <- runif(nrow(iris))
iris <- iris[order(gp),]
iris
str(iris)
summary(iris[,c(1,2,3,4)])
}
return ( (x - min(x)) / (max(x) - min(x))
}
normalize <- function(x) {
}
normalize <- function(x) {
return ( (x - min(x)) / (max(x) - min(x))
}
normalize <- function(x) {
normalize
normalize(2)
normalize(c(1,2,3,4,5))
normalize(c(1,2,3,4,5))
normalize <- function(x) {
return ((x-min(x)/ max(x) - min(x)))
}
normalize(c(1,2,3,4,5))
normalize <- function(x) {
return ((x-min(x))/ (max(x) - min(x)))
}
normalize(c(1,2,3,4,5))
normalize(c(10,22,33,44,55))
set.seed(9850)
gp <- runif(nrow(iris))
iris <- iris[order(gp),]
normalize <- function(x) {
return ((x-min(x))/ (max(x) - min(x)))
}
iris_n <- as.data.frame(lapply(iris[,c(1,2,3,4)],normalize))
str(iris_n)
summary(iris_n)
iris_train <- iris_n[1:139,]
iris_train <- iris_n[1:129,]
iris_test <- iris_n[130:150,]
irist_traint_target <- iris[1:129,5]
irist_traint_target
irist_train_target <- iris[1:129,5]
irist_test_target <- iris[130:150,5]
class
help(knn)
??knn
require(class)
m1 <- knn(train = iris_train, test = iris_test,cl = irist_train_target, k = 13)
m1
tabe(irist_test_target, m1)
table(irist_test_target, m1)
auto <- read.table("auto-mpg.data", stringsAsFactors = FALSE)
View(auto)
x
length(auto)
names(auto)
x <- read.names("auto-mpg.names")
names(auto) <- x
x <- c("mpg","cylinders","displacement","horsepower","weight","acceleration","model year","origin","car name")
names(auto) <- x
head(auto)
x <- c("mpg","cyl","disp","hp","weight","accel","year","origin","carname")
names(auto) <- x
head(auto)
auto.df <- auto[,1:7]
auto[1:10,]
carnames <- auto[,9]
carnames
str(auto.df)
auto2 <- auto.df
auto2$hp <- as.numeric(as.character(auto$hp))
str(auto2)
summary(auto2)
auto.na <- na.omit(auto2)
str(auto.na)
describe(auto.na)
library(describe)
library(psych)
describe(auto.na)
View(auto.na)
View(auto)
plot(auto.na)
auto.na2 <- auto.na[,1:6]
plot(auto.na2)
normalize <- function(x) { ((x-min(x)) / (max(x) - min(x))) }
auto.norm <- as.data.frame(lapply(auto.na2[,1:6], normalize))
auto.norm[1:10,]
View(auto.norm)
zscore <- function(x) { (x - mean(x))/ sd(x) }
auto.znorm <- as.data.frame(lapply(auto.na2[,1:6],scale))
View(auto.znorm)
auto.na2.k2 <- kmeans(auto.norm, centers = 2, nstart = 25)
auto.na2.k2
library(factoextra)
factoextra::fviz_cluster(auto.na2.k2,auto.na2)
auto.na2.k3 <- kmeans(auto.norm, centers = 3, nstart = 25)
factoextra::fviz_cluster(auto.na2.k3,auto.na2)
wssplot <- function(data, nc=15,seed=1234) {
wss <- (nrow(data)-1)* sum(apply(data,2,var))
for(i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data,centers = i)$withinss)
}
plot(1:nc,wss,type="b",xlab = "Number of clusters", ylab = "Within groups sum of squares")
}
wssplot(auto.na2,nc=4,seed = 12324)
factoextra::fviz_nbclust(auto.na2, FUNcluster = kmeans,print.summary = TRUE)
auto.na2.k4
auto.na2.k4 <- kmeans(auto.norm, centers = 4, nstart = 25)
factoextra::fviz_cluster(auto.na2.k4,auto.na2)
auto.na2.k4
auto.na2.k4$centers
auto <- read.table("auto-mpg.data", stringsAsFactors = FALSE)
View(auto)
summary(auto)
summary(auto)
str(auto)
names(auto)
x <- c("mpg","cyl","disp","hp","weight","accel","year","origin","carname")
names(auto) <- x
auto[,1:10]
auto[1:10,]
auto.df <- auto[,1:7]
carnames <- auto[,9]
str(auto.df)
auto2 <- auto.df
auto2$hp <- as.numeric(as.character(auto$hp))
summary(auto2)
library(psych)
auto.na <- na.omit(auto2)
describe(auto)
plot(auto.na)
auto.na2 <- auto.na[,1:6]
normalize <- function(x) { ((x-min(x)) / (max(x) - min(x))) }
auto.norm <- as.data.frame(lapply(auto.na2[,1:6], normalize))
auto.norm[1:10,]
plot(auto.norm)
plot(auto.norm)
auto.na2.k2 <- kmeans(auto.norm, centers = 2, nstart = 25)
auto.na2.k2
auto.na2.k3 <- kmeans(auto.norm, centers = 3, nstart = 25)
auto.na2.k4 <- kmeans(auto.norm, centers = 4, nstart = 25)
auto.na2.k4
auto.na2.k3
wssplot <- function(data, nc=15,seed=1234) {
wss <- (nrow(data)-1)* sum(apply(data,2,var))
for(i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data,centers = i)$withinss)
}
plot(1:nc,wss,type="b",xlab = "Number of clusters", ylab = "Within groups sum of squares")
}
wssplot(auto.na2,nc=4,seed = 12324)
auto.na2.k4$centers
concrete <- read.csv("data.csv")
library(psych)
normalize <- function(x) { ((x-min(x)) / (max(x) - min(x))) }
zscore <- function(x) { (x - mean(x))/ sd(x) }
plot(concrete)
plot(concrete$CCS,concrete$Cement)
plot(concrete$CCS,concrete$Superplasticizer)
View(concrete)
summary(concrete)
library(dplyr)
conrete.filtered <- concrete %>% group_by(concrete$Superplasticizer)
View(conrete.filtered)
conrete.filtered <- concrete %>% group_by(Superplasticizer)
View(conrete.filtered)
conrete.filtered <- concrete %>% distinct(Superplasticizer)
View(conrete.filtered)
conrete.filtered <- concrete[concrete$Superplasticizer >=2,]
View(conrete.filtered)
conrete.filtered <- concrete[concrete$Superplasticizer >=28,]
conrete.filtered <- concrete[,concrete$Superplasticizer >=28]
conrete.filtered <- concrete %>% filter(Age >= 28)
View(conrete.filtered)
plot(concrete.filtered)
View(conrete.filtered)
concrete
plot(conrete.filtered)
View(concrete)
View(conrete.filtered)
summary(concrete)
conrete.filtered <- concrete %>% filter(Age < 50)
View(conrete.filtered)
conrete.filtered <- concrete %>% filter(Age < 50 && Age >20)
conrete.filtered <- concrete %>% filter(Age < 50 & Age >20)
View(conrete.filtered)
plot(conrete.filtered)
concrete.cw <- concrete[,c(1,4)]
View(concrete.cw)
concrete.cw <- concrete[,c(1,4,9)]
conrete.filtered <- concrete %>% filter(Age > 28 & Age < 50)
concrete.cw <- concrete.filtered[,c(1,4,9)]
concrete.filtered <- concrete %>% filter(Age > 28 & Age < 50)
concrete.cw <- concrete.filtered[,c(1,4,9)]
concrete.filtered <- concrete %>% filter(Age < 50 & Age >20)
concrete.cw <- concrete.filtered[,c(1,4,9)]
plot(concrete.cw)
help(cor)
corrplot::corrplot(cor(concrete.cw))
cor(concrete.cw)
cor(concrete)
corrplot::corrplot(cor(concrete))
plot(concrete)
kmeans
plot(concrete.filtered)
concrete.cw <- concrete.filtered[,c(1,4,5,9)]
plot(concrete.cw)
concrete.cw <- concrete.filtered[,c(1,4,5,9)]
concrete.cw.norm <- as.data.frame(lapply(concrete.cw,normalize))
View(concrete.cw.norm)
plot(concrete.cw.norm)
concrete.cw.norm.k2 = kmeans(concrete.cw.norm,centers=2,nstart=25)
concrete.cw.norm.k2
factoextra::fviz_cluster(concrete.cw.norm.k2,concrete.cw.norm)
wssplot(concrete.cw,nc=4,seed=12324)
wssplot <- function(data, nc=15,seed=1234) {
wss <- (nrow(data)-1)* sum(apply(data,2,var))
for(i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data,centers = i)$withinss)
}
plot(1:nc,wss,type="b",xlab = "Number of clusters", ylab = "Within groups sum of squares")
}
wssplot(concrete.cw,nc=4,seed=12324)
wssplot(concrete.cw,nc=10,seed=12324)
wssplot(concrete.cw,nc=8,seed=12324)
wssplot(concrete.cw,nc=6,seed=12324)
concrete.cw.norm.k3 = kmeans(concrete.cw.norm,centers=3,nstart=25)
factoextra::fviz_cluster(concrete.cw.norm.k3,concrete.cw.norm)
concrete.cw.norm.k5 = kmeans(concrete.cw.norm,centers=5,nstart=25)
factoextra::fviz_cluster(concrete.cw.norm.k5,concrete.cw.norm)
concrete.cw.norm.k10 = kmeans(concrete.cw.norm,centers=10,nstart=25)
factoextra::fviz_cluster(concrete.cw.norm.k10,concrete.cw.norm)
concrete.cw.norm.k8 = kmeans(concrete.cw.norm,centers=8,nstart=25)
factoextra::fviz_cluster(concrete.cw.norm.k8,concrete.cw.norm)
concrete.cw.norm.k6 = kmeans(concrete.cw.norm,centers=6,nstart=25)
factoextra::fviz_cluster(concrete.cw.norm.k6,concrete.cw.norm)
View(concrete.filtered)
plot(concrete.filtered)
plot(concrete.filtered[,-8]
plot(concrete.filtered[,-8])
plot(concrete.filtered[,])
plot(concrete.filtered[,-8])
corrplot::corrplot(concrete)
corrplot::corrplot(cor(concrete))
corrplot::corrplot(cor(concrete), method = number)
corrplot::corrplot(cor(concrete), method = "number")
ggplot2::ggplot(concrete)
ggplot2::ggplot(concrete) + ggplot2::geom_point(aes(y=CCS,x=Cement))
library(ggplot2)
ggplot2::ggplot(concrete) + ggplot2::geom_point(aes(y=CCS,x=Cement))
cor(concrete$Cement,concrete$CCS)
